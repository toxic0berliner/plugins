#!/bin/sh

# Definitions
debug=false;
enable_debug=false;

_d () {
  if $debug; then
    echo "DEBUG: $*";
  fi;
}

usage() { ###### U S A G E : Help and ERROR ######
  cat <<EOF
   fetch-address
   $*
          Usage: fetch-address <[options]>
          Options:
                  -s   --service=...        Set getip service
                 [-p] [--scheme=http|https] Set protocol to http or http to contact the checkip service, default to https
                 [-v] [--ip-version=4|6]    Search the response of the service for IPv4 or IPv6, default to IPv4
                 [-i] [--interface=...]     Set interface to be used to contact the service
                 [-h] [--help]              Show this help
                 [-d] [--debug]             Debug output
EOF
exit 1
}


cleanup () {
  unset -f _d usage cleanup ; return 0
}

## Clear out nested functions on exit
trap cleanup INT EXIT TERM

# Parse options
while true; do
  _d "Begin : 1='$1' 2='$2' 3='$3'"
  if [ -z "${1##*=*}" ]; then
    OPTARG=$(echo $1 | cut -d'=' -f2)
    OPTION=$(echo $1 | cut -d'=' -f1)
  else
    OPTION=$1
    OPTARG=$2
    shift
  fi
  _d "About to process option $OPTION with arg $OPTARG"
  case "$OPTION" in
    -h | --help)       _d "case help"; usage ; break;;
    -d | --debug)      _d "case debug"; enable_debug=true ;;
    -s | --service)    _d "case service: '$OPTARG' ('$OPTION')"; service=$OPTARG; shift;;
    -p | --scheme)     _d "case scheme: '$OPTARG' ('$OPTION')"; scheme=$OPTARG; shift;;
    -v | --ip-version) _d "case ip-version: '$OPTARG' ('$OPTION')"; ipversion=$OPTARG; shift;;
    -i | --interface)  _d "case interface: '$OPTARG' ('$OPTION')"; interface=$OPTARG; shift;;
    *)                 _d "case unknown ('$OPTION'='$OPTARG')"; break ;;
  esac
done

if $enable_debug; then
  debug=true;
fi;

_d "would run with interface='$interface' and service='$service'"

if [ -z "$service" ]; then
    usage "option service is missing";
fi

# Default values for scheme and ip-version
if [ -z "$scheme" ]; then
    scheme="https"
fi
if [ -z "$ipversion" ]; then
    scheme="4"
fi

if [ "$ipversion" == "6" ]; then
  greppattern='(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))';
else
  greppattern='([^.]|^)([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5]).([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5]).([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5]).([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])'
fi;

case "$service" in
  web_dyndns )              url="checkip.dyndns.org/";;
  web_freedns )             url="freedns.afraid.org/dynamic/check.php";;
  web_googledomains )       url="domains.google.com/checkip";;
  web_he )                  url="checkip.dns.he.net/";;
  web_ip4only_me )          url="ip4only.me/api/";;
  web_ip6only_me )          url="ip6only.me/api/";;
  web_ipify_ipv4 )          url="api.ipify.org/";;
  web_ipify_ipv6 )          url="api6.ipify.org/";;
  web_loopia )              url="dns.loopia.se/checkip/checkip.php";;
  web_myonlineportal )      url="myonlineportal.net/checkip";;
  web_noip_ipv4 )           url="ip1.dynupdate.no-ip.com/";;
  web_noip_ipv6 )           url="ip1.dynupdate6.no-ip.com/";;
  web_nsupdate_info_ipv4 )  url="ipv4.nsupdate.info/myip";;
  web_nsupdate_info_ipv6 )  url="ipv6.nsupdate.info/myip";;
  web_zoneedit )            url="dynamic.zoneedit.com/checkip.html";;
  * ) usage "Unknown service '$service'" ;;
esac

  

# building the curl command
cmd="curl -s ";
if [ -n "$interface" ]; then
    cmd="$cmd --interface \"$interface\"";
fi
cmd="$cmd $scheme://$url |grep -Eo '$greppattern'"

_d "about to run the curl command: $cmd"
result=$(eval $cmd)
echo $result
return 0
